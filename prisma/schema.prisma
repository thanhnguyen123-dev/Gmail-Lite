generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    threads       Thread[]
    profile       Profile?
}

model Profile {
    email           String @id
    messagesTotal   Int
    threadsTotal    Int
    historyId       String
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String   @unique
}

model Thread {
    id          String @id @default(cuid())
    snippet     String
    historyId   String
    messages    Message[]
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model Message {
    id              String @id @default(cuid())
    thread          Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId        String
    labelIds        String[]
    snippet         String
    historyId       String
    internalDate    String
    payload         MessagePart[]
    sizeEstimate    Int
    raw             String
}

model MessagePart {
    partId        String @id @default(cuid())
    mimeType      String
    fileName      String
    headers       Header[]
    body          MessagePartBody?
    parts         MessagePart[] @relation("MessagePartToMessagePart")
    parentPart    MessagePart? @relation("MessagePartToMessagePart", fields: [parentPartId], references: [partId], onDelete: Cascade)
    parentPartId  String?
    message       Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    messageId     String
}
model Header {
    id          String @id @default(cuid())
    name        String
    value       String
    messagePart MessagePart @relation(fields: [messagePartId], references: [partId], onDelete: Cascade)
    messagePartId String
}

model MessagePartBody {
    id              String @id @default(cuid())
    attachmentId    String 
    size            Int
    data            String
    messagePart     MessagePart @relation(fields: [messagePartId], references: [partId], onDelete: Cascade)
    messagePartId   String @unique
}